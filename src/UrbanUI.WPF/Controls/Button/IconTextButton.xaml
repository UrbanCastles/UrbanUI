<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:UrbanUI.WPF.Controls"
                    xmlns:controls="clr-namespace:UrbanUI.WPF.Controls"
                    xmlns:converter="clr-namespace:UrbanUI.WPF.Converters"
                    x:Name="flatButton">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/UrbanUI.WPF;component/Controls/Button/Button.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--<converter:BorderClipConverter x:Key="FlatButtondBorderClipConverter"/>
    <converter:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>


    <ControlTemplate x:Key="FlatButtonControlTemplateStyle" TargetType="{x:Type local:IconTextButton}">

        <Border x:Name="PART_mainBorder"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="{TemplateBinding CornerRadius}"
                            Background="{TemplateBinding Background}">
            <Border.Clip>
                <MultiBinding Converter="{StaticResource FlatButtondBorderClipConverter}">
                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualWidth"/>
                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="CornerRadius"/>
                </MultiBinding>
            </Border.Clip>

            <StackPanel Orientation="Horizontal">
                <controls:PathIconControl x:Name="PART_iconControl" 
                                                      Width="{TemplateBinding PathIconWidth}" 
                                                      Height="{TemplateBinding PathIconHeight}" 
                                                      VerticalAlignment="Center" HorizontalAlignment="Center" 
                                                      IsEnabled="{TemplateBinding IsEnabled}"  
                                                      Path="{TemplateBinding IconPath}"
                                                      Margin="{TemplateBinding IconMargin}"
                                                      Color="{TemplateBinding IconColor}"
                                                      Visibility="{TemplateBinding IconPath, Converter={StaticResource StringToVisibilityConverter}}"/>

                <ContentPresenter x:Name="PART_contentHost" 
                                              Focusable="False"
                                              Margin="{TemplateBinding Padding}" 
                                              RecognizesAccessKey="True" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              TextElement.Foreground="{TemplateBinding Foreground}"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}" >
                    <ContentPresenter.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="TextDecorations" Value="{Binding Path=TextStyle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}" />
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>
            </StackPanel>

        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_contentHost" Property="TextElement.Foreground" Value="{Binding Path=DisabledForeground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}" />
                <Setter TargetName="PART_mainBorder" Property="Background" Value="{Binding Path=DisabledBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}" />
                <Setter TargetName="PART_iconControl" Property="Color" Value="{Binding Path=DisabledIconColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_contentHost" Property="TextElement.Foreground" Value="{Binding Path=MouseEnterForeground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}" />
                <Setter TargetName="PART_mainBorder" Property="Background" Value="{Binding Path=MouseEnterBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}"/>
                <Setter TargetName="PART_iconControl" Property="Color" Value="{Binding Path=MouseEnterIconColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="PART_mainBorder" Property="Background" Value="{Binding Path=MousePressedBackground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}"/>
                <Setter TargetName="PART_iconControl" Property="Color" Value="{Binding Path=PressedIconColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}"/>
                <Setter TargetName="PART_iconControl" Property="Path" Value="{Binding Path=PressedIconPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}"/>
            </Trigger>
            <DataTrigger Binding="{Binding PressedIconPath}" Value="{x:Null}">
                <Setter TargetName="PART_iconControl" Property="Path" Value="{Binding Path=IconPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:IconTextButton}}}"/>
            </DataTrigger>

            <Trigger Property="IconPath" Value="{x:Null}">
                <Setter TargetName="PART_iconControl" Property="Margin" Value="0" />
            </Trigger>


            --><!--  TRANSPARENT  --><!--
            <Trigger Property="ButtonAppearance" Value="Transparent">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  PRIMARY  --><!--
            <Trigger Property="ButtonAppearance" Value="Primary">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  SUCCESS  --><!--
            <Trigger Property="ButtonAppearance" Value="Success">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  INFORMATION  --><!--
            <Trigger Property="ButtonAppearance" Value="Information">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  WARNING  --><!--
            <Trigger Property="ButtonAppearance" Value="Warning">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  DANGER  --><!--
            <Trigger Property="ButtonAppearance" Value="Danger">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  LIGHT  --><!--
            <Trigger Property="ButtonAppearance" Value="Light">
                <Setter Property="IconColor" Value="#333" />
                <Setter Property="PressedIconColor" Value="#333" />
            </Trigger>

            --><!--  DARK  --><!--
            <Trigger Property="ButtonAppearance" Value="Dark">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

            --><!--  DARK  -->
            <!--<Trigger Property="ButtonAppearance" Value="Dark">
                <Setter Property="IconColor" Value="White" />
                <Setter Property="PressedIconColor" Value="White" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style TargetType="{x:Type local:IconTextButton}" x:Key="UrbanUI.WPF.IconTextButtonUIStyle">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template" Value="{StaticResource FlatButtonControlTemplateStyle}">
        </Setter>
    </Style>-->

    <Style x:Key="IconTextDefaultUIStyle" BasedOn="{StaticResource UrbanUI.WPF.ButtonUIStyle}" TargetType="{x:Type local:Button}">
        <Setter Property="Content">
            <Setter.Value>
                                <controls:PathIconControl x:Name="PART_iconControl" 
                                                      Width="{TemplateBinding PathIconWidth}" 
                                                      Height="{TemplateBinding PathIconHeight}" 
                                                      VerticalAlignment="Center" HorizontalAlignment="Center" 
                                                      IsEnabled="{TemplateBinding IsEnabled}"  
                                                      Path="{TemplateBinding IconPath}"
                                                      Margin="{TemplateBinding IconMargin}"
                                                      Color="{TemplateBinding IconColor}"
                                                      Visibility="{TemplateBinding IconPath, Converter={StaticResource StringToVisibilityConverter}}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource IconTextDefaultUIStyle}" TargetType="{x:Type local:IconTextButton}"/>
</ResourceDictionary>